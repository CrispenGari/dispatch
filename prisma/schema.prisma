generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @unique @default(uuid())
  email    String  @unique
  nickname String  @unique
  password String
  avatar   String?

  confirmed       Boolean @default(false)
  verified        Boolean @default(false)
  isAuthenticated Boolean @default(false)
  gender          Gender  @default(UNDEFINED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  tweets Tweet[]

  poll     Poll?     @relation(fields: [pollId], references: [id])
  pollId   String?
  comments Comment[]
}

model Comment {
  id   String @unique @default(uuid())
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reactions Reaction[]
  replies   Comment[]  @relation("CommentReplies")

  commentId String?
  comment   Comment? @relation("CommentReplies", fields: [commentId], references: [id])

  creator User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
  Tweet   Tweet?  @relation(fields: [tweetId], references: [id])
  tweetId String?
}

model Reaction {
  id String @unique @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  tweet     Tweet?   @relation(fields: [tweetId], references: [id])
  tweetId   String?
}

model Poll {
  id   String @unique @default(uuid())
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  votes   User[]
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tweetId String
}

model Tweet {
  id    String @unique @default(uuid())
  text  String
  views Int    @default(0)

  // tweet location coodinates
  lat Int
  lon Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  polls Poll[]

  reactions Reaction[]
  comments  Comment[]

  creator User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
}

enum Gender {
  MALE
  FEMALE
  UNDEFINED
}
