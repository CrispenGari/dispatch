generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @unique @default(uuid())
  email    String  @unique
  nickname String  @unique
  password String
  avatar   String?

  confirmed       Boolean @default(false)
  verified        Boolean @default(false)
  isAuthenticated Boolean @default(false)
  gender          Gender  @default(UNDEFINED)
  bio             String?

  userId    String?
  user      User?   @relation("UserProfileViews", fields: [userId], references: [id])
  profileViews User[]  @relation("UserProfileViews")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  tweets   Tweet[]
  mentions Mention[]

  pollId        String?
  comments      Comment[]
  reactions     Reaction[]
  replies       Reply[]
  blocked       Blocked[]
  notifications Notification[]
  vote          Vote[]
}

model Comment {
  id   String @unique @default(uuid())
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reactions Reaction[]
  replies   Reply[]

  creator User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
  tweet   Tweet?  @relation(fields: [tweetId], references: [id])
  tweetId String?
}

model Reply {
  id   String @unique @default(uuid())
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reactions Reaction[]

  creator User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String
}

model Reaction {
  id String @unique @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  tweet   Tweet?  @relation(fields: [tweetId], references: [id])
  tweetId String?

  reply   Reply?  @relation(fields: [replyId], references: [id])
  replyId String?
}

//
model Blocked {
  id String @unique @default(uuid())

  uid String // the id of the user that has been blocked

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

//
model Notification {
  id      String  @unique @default(uuid())
  title   String
  message String
  read    Boolean @default(false)
  tweetId String

  // category [mention|general]
  category NotificationCategory
  // type [reaction|comment|repy|new-tweet]
  type     NotificationType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Poll {
  id   String @unique @default(uuid())
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  votes   Vote[]
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tweetId String
}

model Vote {
  id String @unique @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tweetId String

  creator User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String

  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pollId String
}

model Tweet {
  id    String   @unique @default(uuid())
  text  String
  views String[]

  // tweet location coodinates
  lat Float
  lon Float

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  pollExpiresIn DateTime

  // relations
  polls Poll[]

  reactions Reaction[]
  comments  Comment[]

  creator User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String

  vote     Vote[]
  mentions Mention[]
}

model Mention {
  id String @unique @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tweetId String
}

enum Gender {
  MALE
  FEMALE
  UNDEFINED
}

enum NotificationCategory {
  general
  mention
}

enum NotificationType {
  reaction
  comment
  reply
  new_tweet
  poll_vote_in
}
